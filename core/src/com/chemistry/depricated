    @Deprecated //created a better version
    public void reactionStarted(Map<Foundation, Integer> foundPool, Map<Oxid, Integer> oxidPool){ // We swap foundations for oxidizers
        String answer = "";

        ArrayList<Oxid> oxids = new ArrayList<>();

        for (Oxid oxid : oxidPool.keySet()){
            oxids.add(oxid);
        }

        ArrayList<Foundation> foundations = new ArrayList<>();

        for (Foundation found : foundPool.keySet()){
            foundations.add(found);
        }

        for (Foundation foundation : foundations){
            answer += foundation.getFoundation_name();
            answer += " ";
        }
        String[] tempArray = answer.trim().split(" ");
        System.out.println(answer);

        //also need a method to every substance to check for their actual state (not min or max, just one possible, according to another evaluation) p.s. for future

        int i = tempArray.length-1;
        int firstOxidEval = oxidPool.get(oxids.get(i)) * Integer.parseInt(oxids.get(i).getOxid_state_min()); // params that are state * amount
        int secondOxidEval = oxidPool.get(oxids.get(i-1)) * Integer.parseInt(oxids.get(i-1).getOxid_state_min()); // also names should be different first is second substance etc
        if (firstOxidEval == secondOxidEval){ //This check should be working fine. All it does:
        } else if (firstOxidEval > secondOxidEval){ //We swap their amounts according to evals (2 with 1)
            int tempInt = (oxidPool.get(oxids.get(i)) * Integer.parseInt(oxids.get(i).getOxid_state_min()))
                    / Integer.parseInt(oxids.get(i-1).getOxid_state_min());

            if (tempInt == 0){ //probably useless, but for now I will leave it
                tempInt++;
            }

            int tempInt2 = (oxidPool.get(oxids.get(i-1)) * Integer.parseInt(oxids.get(i-1).getOxid_state_min()))
                    / Integer.parseInt(oxids.get(i).getOxid_state_min());

            if (tempInt2 == 0){
                tempInt2++;
            }


            oxidPool.replace(oxids.get(i), tempInt2);
            oxidPool.replace(oxids.get(i-1), tempInt);

        } else { // 1 with 2 2Fe(Cl)6 nerf
            int tempInt = (oxidPool.get(oxids.get(i-1)) * Integer.parseInt(oxids.get(i-1).getOxid_state_min()))
                    / Integer.parseInt(oxids.get(i).getOxid_state_min());

            if (tempInt == 0){
                tempInt++;
            }

            int tempInt2 = (oxidPool.get(oxids.get(i)) * Integer.parseInt(oxids.get(i).getOxid_state_min()))
                    / Integer.parseInt(oxids.get(i-1).getOxid_state_min());

            if (tempInt2 == 0){
                tempInt2++;
            }
            System.out.println(tempInt2 + " ti2");
            oxidPool.replace(oxids.get(i-1), tempInt2);
            oxidPool.replace(oxids.get(i), tempInt);
        }

        // nerf 2FeCl6 -> FeCl3
        // 2->4 still exists (not nerfed). nerfed
        if (foundPool.get(foundations.get(i-1)) % 2 == 0 && oxidPool.get(oxids.get(i)) % 2 == 0){
            foundPool.replace(foundations.get(i-1), foundPool.get(foundations.get(i-1)) / 2);
            oxidPool.replace(oxids.get(i),oxidPool.get(oxids.get(i)) / 2);
        }
        if (foundPool.get(foundations.get(i)) % 2 == 0 && oxidPool.get(oxids.get(i-1)) % 2 == 0){
                foundPool.replace(foundations.get(i), foundPool.get(foundations.get(i)) / 2);
                oxidPool.replace(oxids.get(i-1),oxidPool.get(oxids.get(i-1)) / 2);
        }

        //At upper code there were NO replacements in oxids/founds arrays. BUT it swapped their amounts already!

        boolean nullOxidizer = oxids.get(i).getOxid_name().equals("0") || oxids.get(i - 1).getOxid_name().equals("0");

        if (nullOxidizer){
            //code for substance where oxid is null (only foundation aka Na)
        } else {
            //for all substances
            int firstSFoundEval = foundPool.get(foundations.get(i-1)) * Integer.parseInt(foundations.get(i-1).getFound_state_max());
            int firstSOxidEval = -oxidPool.get(oxids.get(i)) * Integer.parseInt(oxids.get(i).getOxid_state_min());
            int secondSFoundEval = foundPool.get(foundations.get(i)) * Integer.parseInt(foundations.get(i).getFound_state_max());
            int secondSOxidEval = -oxidPool.get(oxids.get(i-1)) * Integer.parseInt(oxids.get(i-1).getOxid_state_min());
            System.out.println(firstSFoundEval + " - " + firstSOxidEval);
            System.out.println(secondSFoundEval + " - " + secondSOxidEval);

            if (firstSOxidEval > firstSFoundEval){
                foundPool.replace(foundations.get(i), firstSOxidEval / Integer.parseInt(foundations.get(i-1).getFound_state_max()));
                System.out.println(foundPool.get(foundations.get(i)));
            }
            if (secondSOxidEval > secondSFoundEval){
                foundPool.replace(foundations.get(i-1), secondSOxidEval / Integer.parseInt(foundations.get(i).getFound_state_max()));
                System.out.println(foundPool.get(foundations.get(i-1)));
            }
        }

        System.out.println(oxidPool.get(oxids.get(i)) + " - " + oxidPool.get(oxids.get(i-1)));

        for (String string : tempArray){
            System.out.println(string + " ///");
        }

        for (Foundation foundation : foundations){
            if (foundPool.get(foundation) > 1){
                tempArray[i] = foundPool.get(foundation) + "(" + tempArray[i] + ")";
            }
            if (tempArray[i].equals("H")){ // Only for water for now. Non-single hydrogen works incorrect.
                tempArray[i] = "(" + tempArray[i] + ")" + "2";
            }
            i--;
        }

        i = tempArray.length-1;

        for (Oxid oxid : oxids){
            if (oxidPool.get(oxid) <= 1){
                if (!tempArray[i].equals("(H)2") && !tempArray[i].equals("NH4")){
                    tempArray[i] = tempArray[i] + oxid.getOxid_name();
                }
            } else {
                tempArray[i] = tempArray[i] + "(" + oxid.getOxid_name() + ")" + oxidPool.get(oxid);
            }
            i--;
        }

        phrase = "Какой итог мы получили: " + String.join(" + ", tempArray) + ". Емкость очищена";

        clearEquipment();
    }
